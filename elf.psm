(num, str, bin) -> {
    #`+` = num.add
    #`-` = num.subtract

    elfclass = {
        class_none = 0
        class_32 = 1
        class_64 = 2
    }
    elfdata = {
        data_none = 0
        data_2LSB = 1
        data_2MSB = 2
    }
    ev = {
        none    = 0
        current = 1
    }
    osabi = {
        sysv    = 0x00
        hpux    = 0x01
        netbsd  = 0x02
        linux   = 0x03
        solaris = 0x06
        aix     = 0x07
        irix    = 0x08
        freebsd = 0x09
        tru64   = 0x0A
        modesto = 0x0B
        openbsd = 0x0C
        openvms = 0x0D
        nsk     = 0x0E
        standalone = 0xFF
    }
    et = {
        none = 0
        rel  = 1
        exec = 2
        dyn  = 3
        core = 4
        loos   = 0xFE00
        hios   = 0xFEFF
        loproc = 0xFF00
        hiproc = 0xFFFF
    }
    machine = {
        sparc   = 0x02
        x86     = 0x03
        mips    = 0x08
        ppc     = 0x14
        arm     = 0x28
        superh  = 0x2A
        ia_64   = 0x32
        x86_64  = 0x3E
        aarch64 = 0xB7
    }

    pt = {
        null    = 0
        load    = 1
        dynamic = 2
        interp  = 3
        note    = 4
        shlib   = 5
        phdr    = 6
        loos    = 0x60000000
        hios    = 0x6FFFFFFF
        loproc  = 0x70000000
        hiproc  = 0x7FFFFFFF
    }
    pf = {
        x = 0x1
        w = 0x2
        r = 0x4
        maskos   = 0x00FF0000
        maskproc = 0xFF000000
    }
    program_header_entry = (phe) -> {
        bin.u32(phe.type)
        bin.u32(phe.flags)
        bin.u64(phe.offset)
        bin.u64(phe.vaddr)
        bin.u64(phe.paddr)
        bin.u64(phe.filesz)
        bin.u64(phe.memsz)
        bin.u64(phe.align)
    }

    shn = {
        undef  = 0
        loproc = 0xFF00
        hiproc = 0xFF1F
        loos   = 0xFF20
        hios   = 0xFF3F
        abs    = 0xFFF1
        common = 0xFFF2
    }
    sht = {
        null = 0
        progbits = 1
        symtab = 2
        strtab = 3
        rela = 4
        hash = 5
        dynamic = 6
        note = 7
        nobits = 8
        rel = 9
        shlib = 10
        dynsym = 11
        loos   = 0x60000000
        hios   = 0x6FFFFFFF
        loproc = 0x70000000
        hiproc = 0x7FFFFFFF
    }
    shf = {
        write = 0x1
        alloc = 0x2
        execinstr = 0x4
        maskos   = 0x0F000000
        maskproc = 0xF0000000
    }

    # TODO: noexec stack
    # TODO: sections, should have:
    # r-x text
    # rw- stack
    # rw- data
    # rw- bss
    # r-- rodata

    section_header_entry = (she) -> {
        bin.u32(she.name)
        bin.u32(she.type)
        bin.u64(she.flags)
        bin.u64(she.addr)
        bin.u64(she.offset)
        bin.u64(she.size)
        bin.u32(she.link)
        bin.u32(she.info)
        bin.u64(she.addralign)
        bin.u64(she.entsize)
    }

    # Thanks to muppetlabs.com for the Whirlwind Tutorial on Creating
    # Really Teensy ELF Executables for Linux :)
    linux_x64 = (rodata, data, bss, text) -> {
        rx_segment_addr = 0x00400000
        rw_segment_addr = 0x00600000
        binsize = num.subtract(end, beginning)

        text_addr   = num.add(rx_segment_addr, text_offset)
        rodata_addr = num.add(rx_segment_addr, rodata_offset)
        data_addr   = num.add(rw_segment_addr, data_offset)
        bss_addr    = num.add(rw_segment_addr, bss_offset)

        repositioned_data   = WithPosition(data_addr,   data)
        repositioned_bss    = WithPosition(bss_addr,    bss)
        repositioned_rodata = WithPosition(rodata_addr, rodata)
        repositioned_text   = WithPosition(text_addr,
                                           text(repositioned_rodata,
                                                repositioned_data,
                                                repositioned_bss))

        ei_mag0       = 0x7F
        ei_mag        = "ELF"
        ei_class      = elfclass.class_64
        ei_data       = elfdata.data_2LSB
        ei_version    = ev.current
        ei_osabi      = osabi.linux
        ei_abiversion = 0
        ei_pad        = bin.unsigned(7, 0)

        e_type      = et.exec
        e_machine   = machine.x86_64
        e_version   = ei_version
        e_entry     = repositioned_text.start
        e_phoff     = num.subtract(phdr, beginning)
        e_shoff     = num.subtract(shdr, beginning)
        e_flags     = 0
        e_ehsize    = num.subtract(phdr, ehdr)
        e_phentsize = num.subtract(phdr_after_first, phdr)
        e_phnum     = 2
        e_shentsize = num.subtract(shdr_after_first, shdr)
        e_shnum     = 6
        e_shstrndx  = 5 # .shstrtab

        :beginning:
        :ehdr:
        bin.u8(      ei_mag0)
        str.ascii(3, ei_mag)
        bin.u8(      ei_class)
        bin.u8(      ei_data)
        bin.u8(      ei_version)
        bin.u8(      ei_osabi)
        bin.u8(      ei_abiversion)
        bin.bin(7,   ei_pad)

        bin.u16(e_type)
        bin.u16(e_machine)
        bin.u32(e_version)
        bin.u64(e_entry)
        bin.u64(e_phoff)
        bin.u64(e_shoff)
        bin.u32(e_flags)
        bin.u16(e_ehsize)
        bin.u16(e_phentsize)
        bin.u16(e_phnum)
        bin.u16(e_shentsize)
        bin.u16(e_shnum)
        bin.u16(e_shstrndx)

        :phdr:
        # what's a pt.phdr? do i need one?
        # could offset be text_offset instead of 0?
        program_header_entry({type=pt.load; offset=0;
                              vaddr=rx_segment_addr; paddr=rx_segment_addr;
                              filesz=binsize; memsz=binsize;
                              flags=num.add(pf.x, pf.r); align=0x200000})
        :phdr_after_first:

        # add rodata as pf.r?

        program_header_entry({type=pt.load; offset=rodata_offset;
                              vaddr=num.add(rw_segment_addr, rodata_offset);
                              paddr=num.add(rw_segment_addr, rodata_offset);
                              filesz=num.subtract(shstrtab, rodata_offset);
                              memsz=num.add(num.subtract(shstrtab, rodata_offset),
                                            bin.sizeof(bss));
                              flags=num.add(pf.w, pf.r); align=0x200000})

        :rest:

        :text_offset:
        repositioned_text()

        :rodata_offset:
        rodata()

        :data_offset:
        data()

        :bss_offset:
        # nobits

        :shstrtab:
        str.ascii(1,  "\0") # first string is null
        str.ascii(6,  ".text\0")
        str.ascii(8,  ".rodata\0")
        str.ascii(6,  ".data\0")
        str.ascii(5,  ".bss\0")
        str.ascii(10, ".shstrtab\0")

        :shdr:
        # first section header is all null
        section_header_entry({name=0; type=sht.null;
                              flags=0; addr=0; offset=0; size=0;
                              link=shn.undef; info=0; addralign=0; entsize=0})
        :shdr_after_first:

        section_header_entry({name=1; type=sht.progbits;
                              flags=num.add(shf.alloc, shf.execinstr);
                              addr=text_addr; offset=text_offset;
                              size=num.subtract(rodata_offset, text_offset);
                              link=shn.undef; info=0; addralign=16; entsize=0})

        section_header_entry({name=7; type=sht.progbits; flags=shf.alloc;
                              addr=rodata_addr; offset=rodata_offset;
                              size=num.subtract(data_offset, rodata_offset);
                              link=shn.undef; info=0; addralign=32; entsize=0})

        section_header_entry({name=15; type=sht.progbits;
                              flags=num.add(shf.alloc, shf.write);
                              addr=data_addr; offset=data_offset;
                              size=num.subtract(bss_offset, data_offset);
                              link=shn.undef; info=0; addralign=32; entsize=0})

        section_header_entry({name=21; type=sht.nobits;
                              flags=num.add(shf.alloc, shf.write);
                              addr=bss_addr; offset=bss_offset;
                              size=bin.sizeof(bss);
                              link=shn.undef; info=0; addralign=32; entsize=0})

        section_header_entry({name=26; type=sht.strtab; flags=0;
                              addr=0; offset=shstrtab;
                              size=num.subtract(shdr, shstrtab);
                              link=shn.undef; info=0; addralign=1; entsize=0})

        :end:

"
        # i'd like to move to something a bit simpler. needs:
        # a) ':label: = block' style assignments
        # a.i) with the block's label values fully placed
        # b) out-of-order label label references, at least

        WithPosition(0x00400000, {
            # ELF header in here

            # pass back the placed copies of the blocks so label
            # values can be used
            :placed_text: = text(placed_rodata, placed_data)

            # any labels accessed via these blocks' vars would have
            # the correct label placement values
            :placed_rodata: = rodata()
            :placed_data:   = data()
        })
"

"
            bin.pad_modulo(4, text(placed_rodata, placed_data, placed_bss))

            :placed_rodata: = rodata()
"
    # Now when the length of text becomes known, we simply round up to
    # the nearest multiple of 4, appending zeroes.

    }
}
