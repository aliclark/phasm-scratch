(std) -> {
    b   = (x) -> std.U(1, x)
    s8  = (x) -> std.S(1, x)
    s32 = (x) -> std.S(4, x)

    add_rax_s8 = (var) -> { b(0x48); b(0x83); b(0xc0); s8(var) }
    add_rsp_s8 = (var) -> { b(0x48); b(0x83); b(0xc4); s8(var) }

    #cmp_rax_s8 = (var) -> { b(0x83); b(0xf8); s8(var) }
    cmp_rax_s8 = (var) -> { b(0x48); b(0x83); b(0xf8); s8(var) }

    callq_s32 = (dest) -> {
        b(0xe8); s32(std.Subtract(dest, curpos))
        :curpos:
    }
    callq_s32_from = (dest, curpos) -> {
        b(0xe8); s32(std.Subtract(dest, curpos))
    }

    retq = b(0xc3)

    jge_s8 = (dest) -> {
        b(0x7d); s8(std.Subtract(dest, curpos))
        :curpos:
    }
    jmp_s8 = (dest) -> {
        b(0xeb); s8(std.Subtract(dest, curpos))
        :curpos:
    }

    # should really put this somewhere other than std.
    mov  = std.mov
    push = std.push
    pop  = std.pop

    # These are relatively pointless with the more powerful mov and
    # push in std.
    mov_rax_s32 = (var) -> { b(0xb8); s32(var) }
    mov_rcx_s32 = (var) -> { b(0xb9); s32(var) }
    mov_rdx_s32 = (var) -> { b(0xba); s32(var) }
    mov_rbx_s32 = (var) -> { b(0xbb); s32(var) }
    mov_rbp_rsp = { b(0x89); b(0xe5) }
    push_rax = b(0x50)
    push_rcx = b(0x51)
    push_rdx = b(0x52)
    push_rbx = b(0x53)
    push_rbp = b(0x55)
    push_rsi = b(0x56)
    push_rdi = b(0x57)
    pushq_s8  = (var) -> { b(0x6a); s8(var)  }
    pushq_s32 = (var) -> { b(0x68); s32(var) }
    pop_rax  = b(0x58)
    pop_rcx  = b(0x59)
    pop_rdx  = b(0x5a)
    pop_rbx  = b(0x5b)
    pop_rbp  = b(0x5d)
    pop_rsi  = b(0x5e)
    pop_rdi  = b(0x5f)
}
