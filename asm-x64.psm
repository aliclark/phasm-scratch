(num, bin, asm_base) -> {
    b   = bin.u8
    i8  = bin.i8
    i32 = bin.i32

    add_rax_i8 = (var) -> { b(0x48); b(0x83); b(0xc0); i8(var) }
    add_rsp_i8 = (var) -> { b(0x48); b(0x83); b(0xc4); i8(var) }

    #cmp_rax_i8 = (var) -> { b(0x83); b(0xf8); i8(var) }
    cmp_rax_i8 = (var) -> { b(0x48); b(0x83); b(0xf8); i8(var) }

    callq_i32 = (dest) -> {
        b(0xe8); i32(num.subtract(dest, curpos))
        :curpos:
    }
    callq_i32_from = (dest, curpos) -> {
        b(0xe8); i32(num.subtract(dest, curpos))
    }

    retq = b(0xc3)

    j_i8_common = (op) -> (dest) -> {
        b(op); i8(num.subtract(dest, curpos))
        :curpos:
    }

    je_i8  = j_i8_common(0x74)

    # FIXME: the evaluation code is broken, seems to remember the 0x74
    #jne_i8 = j_i8_common(0x75)

    jne_i8 = (dest) -> {
        b(0x75); i8(num.subtract(dest, curpos))
        :curpos:
    }
    jge_i8 = (dest) -> {
        b(0x7d); i8(num.subtract(dest, curpos))
        :curpos:
    }
    jmp_i8 = (dest) -> {
        b(0xeb); i8(num.subtract(dest, curpos))
        :curpos:
    }

    mov  = asm_base.mov
    push = asm_base.push
    pop  = asm_base.pop

    # These are relatively pointless with the more powerful mov and
    # push in asm_base.
    mov_rax_i32 = (var) -> { b(0xb8); i32(var) }
    mov_rcx_i32 = (var) -> { b(0xb9); i32(var) }
    mov_rdx_i32 = (var) -> { b(0xba); i32(var) }
    mov_rbx_i32 = (var) -> { b(0xbb); i32(var) }
    mov_rbp_rsp = { b(0x89); b(0xe5) }
    push_rax = b(0x50)
    push_rcx = b(0x51)
    push_rdx = b(0x52)
    push_rbx = b(0x53)
    push_rbp = b(0x55)
    push_rsi = b(0x56)
    push_rdi = b(0x57)
    pushq_i8  = (var) -> { b(0x6a); i8(var)  }
    pushq_i32 = (var) -> { b(0x68); i32(var) }
    pop_rax  = b(0x58)
    pop_rcx  = b(0x59)
    pop_rdx  = b(0x5a)
    pop_rbx  = b(0x5b)
    pop_rbp  = b(0x5d)
    pop_rsi  = b(0x5e)
    pop_rdi  = b(0x5f)
}
