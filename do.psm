
# Warning: pseudo-code

(asm) -> {
    if = (test, then, else) -> {
        test()
        asm.jz(l_else)

        then()
        asm.jmp(end)

        :l_else:
        else()
        :end:
    }

    while = (test, code) -> {
        :loop:

        if (test, {
            code()
            asm.jmp(loop)
        },{
	})
    }

    for = (location, n, code) -> {
        asm.set-reg(location, 0)

        while ({asm.cmp(location, n); asm.test-less()}, {
            code()
            asm.inc(location)
        })
    }

    loop = (n, code) -> {
        asm.push(asm.regA)

        for (asm.regA, n, {
            code()
        })
        asm.pop(asm.regA)
    }
}
