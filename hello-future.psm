
(std, asm, elf, proc, sys, util) -> {

    bytes = (n) -> std.U(n, 0)
    type = (block) -> WithPosition(0, block)

    ptr_new = bytes(8)
    ptr_t = type(ptr_new)

    list_new = {
        :value: ptr_new
        :next:  ptr_new
    }
    list_t = type(list_new)

    bss = {
        :counter: bytes(8)
        :my_foo_list: list_new
    }

    data = {
        :verbose: std.U(1, 0)
    }

    rodata = {
        :hello_world: = util.utf8("Hello, world!\n")
        :bye:         = util.utf8("bye!\n")
    }

    text = (rodata, data, bss) -> {

        # arg1: address, arg2: length
        :print: proc.sub2({
            asm.mov("rdx", "[rbp+24]")
            asm.mov("rcx", "[rbp+16]")
            asm.mov("rbx", sys.fd_stdout)
            sys.call(sys.sys_write)
        })

        :start: {
            print.call(rodata.hello_world, rodata.hello_world.size)
            sys.exit(0)
        }
    }

    elf.linux_x64(rodata, data, bss, text)
}
