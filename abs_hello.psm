
(std, asm, elf, proc, sys, util) -> {

    rodata = {
        hello_world = util.utf8("Hello, world!\n")
        bye         = util.utf8("bye!\n")

        :hello_world_addr: hello_world
        :bye_addr:         bye

	# TODO: new syntax
        # :hello_world: = util.utf8("Hello, world!\n")
        # :bye:         = util.utf8("bye!\n")
    }

    data = {
        :counter: std.U(8, 0)
    }

    text = (rodata, data) -> {
        :start: {
            # TODO: seccomp2 ourselves down to just sys_write and sys_exit

            util.loop(3, {
                proc.call2(print, rodata.hello_world_addr, rodata.hello_world.size)
            })
            proc.call2(print, rodata.bye_addr, rodata.bye.size)
            sys.exit(42)
        }

        :print: proc.sub({
            asm.mov("rbx", sys.fd_stdout)
            asm.mov("rcx", "[rbp+16]")
            asm.mov("rdx", "[rbp+24]")
            sys.call(sys.sys_write)
        })
    }

    elf.linux_x64(rodata, data, text)
}
